(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Hotcache, defaultPromise, e, makeExpire, makeItem,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  defaultPromise = (function() {
    var error1;
    try {
      return require("bluebird");
    } catch (error1) {
      e = error1;
      return typeof Promise !== "undefined" && Promise !== null ? Promise : function() {
        throw new Error("Bottleneck: install 'bluebird' or use Node 0.12 or higher for Promise support");
      };
    }
  })();

  makeExpire = function(cache, key, exp) {
    var base;
    return typeof (base = setTimeout(function() {
      var ref1;
      if (((ref1 = cache[key]) != null ? ref1.waiting.length : void 0) === 0) {
        return delete cache[key];
      }
    }, exp)).unref === "function" ? base.unref() : void 0;
  };

  makeItem = function(cache, key, exp, element) {
    if (element == null) {
      element = null;
    }
    return {
      element: element,
      expire: makeExpire(cache, key, exp),
      waiting: []
    };
  };

  Hotcache = (function() {
    function Hotcache(HPromise) {
      this.HPromise = HPromise != null ? HPromise : defaultPromise;
      this.del = bind(this.del, this);
      this.pget = bind(this.pget, this);
      this.get = bind(this.get, this);
      this.cache = {};
    }

    Hotcache.prototype.get = function() {
      var args, cb, exp, fn, i, key, newCached;
      key = arguments[0], exp = arguments[1], fn = arguments[2], args = 5 <= arguments.length ? slice.call(arguments, 3, i = arguments.length - 1) : (i = 3, []), cb = arguments[i++];
      if (this.cache[key] != null) {
        if (this.cache[key].element != null) {
          return cb.apply({}, this.cache[key].element);
        } else {
          return this.cache[key].waiting.push(cb);
        }
      } else {
        newCached = makeItem(this.cache, key, exp);
        this.cache[key] = newCached;
        this.cache[key].waiting.push(cb);
        return setTimeout((function(_this) {
          return function() {
            return fn.apply({}, Array.prototype.concat.call(args, function() {
              var res;
              res = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              clearTimeout(newCached.expire);
              if (res[0] == null) {
                _this.cache[key] = makeItem(_this.cache, key, exp, res);
              } else {
                delete _this.cache[key];
              }
              return newCached.waiting.forEach(function(v) {
                return v.apply({}, res);
              });
            }));
          };
        })(this), 0);
      }
    };

    Hotcache.prototype.pget = function() {
      var args, exp, fn, key, wrapped;
      key = arguments[0], exp = arguments[1], fn = arguments[2], args = 4 <= arguments.length ? slice.call(arguments, 3) : [];
      wrapped = (function(_this) {
        return function(cb) {
          var err, processed, ref;
          processed = (function() {
            var error1, ref1;
            try {
              if (typeof ((ref1 = (ref = fn.apply({}, args))) != null ? ref1.then : void 0) === 'function') {
                return ref;
              } else {
                return this.HPromise.resolve(ref);
              }
            } catch (error1) {
              err = error1;
              return this.HPromise.reject(err);
            }
          }).call(_this);
          return processed.then(function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return cb.apply({}, Array.prototype.concat(null, args));
          })["catch"](function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return cb.apply({}, Array.prototype.concat({}, args));
          });
        };
      })(this);
      return new this.HPromise((function(_this) {
        return function(resolve, reject) {
          return _this.get.apply({}, Array.prototype.concat(key, exp, wrapped, function() {
            var args, error;
            error = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
            return (error != null ? reject : resolve).apply({}, args);
          }));
        };
      })(this));
    };

    Hotcache.prototype.del = function() {
      var keys;
      keys = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return keys.forEach((function(_this) {
        return function(k) {
          return delete _this.cache[k];
        };
      })(this));
    };

    Hotcache;

    return Hotcache;

  })();

  module.exports = Hotcache;

}).call(this);

},{"bluebird":undefined}],2:[function(require,module,exports){
(function (global){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = require("./Hotcache");

  if (global.window != null) {
    global.window.Hotcache = module.exports;
  }

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Hotcache":1}]},{},[2]);
